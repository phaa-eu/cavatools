#!/usr/bin/env python

from builtins import hex
from builtins import range
import math
import sys
import re
import os
import json
from collections import OrderedDict

def eprint(*args):
    sys.stderr.write(' '.join(map(str,args)) + '\n')
    
def diffcp(fname):
    if os.path.exists(fname) and os.system('cmp -s newcode.tmp '+fname) == 0:
        os.system('rm newcode.tmp')
    else:
        os.system('mv newcode.tmp '+fname)

opcodes = OrderedDict()
for filename in sys.argv[1:]:
    with open(filename) as f:
        d = json.load(f)
    for name, attrs in d.items():
        if name in opcodes:
            for a in attrs:
                opcodes[name][a] = attrs[a]
        else:
            opcodes[name] = attrs

regs = {}
#regs['cfd']	= ( 2, 3, '+8+FPREG', 'op_rd')
#regs['crd']	= ( 2, 3, '+8+GPREG', 'op_rd')
#regs['cs2']	= ( 2, 3, '+8+GPREG', 'op.rs2')
#regs['ds2']	= ( 2, 3, '+8+FPREG', 'op.rs2')
#regs['fs4']	= ( 2, 5, '+FPREG',   'op.rs2')
#regs['rs4']	= ( 2, 5, '+GPREG',   'op.rs2')
#regs['cs1']	= ( 7, 3, '+8+GPREG', 'op_rs1')
#regs['cd1']	= ( 7, 3, '+8+GPREG', 'op_rd',  'op_rs1')
#regs['rd1']	= ( 7, 5, '+GPREG',   'op_rd',  'op_rs1')
#regs['rs5']	= ( 7, 5, '+GPREG',   'op_rs1')

#regs['rd']	= ( 7, 5, '+GPREG',   'op_rd')
#regs['fd']	= ( 7, 5, '+FPREG',   'op_rd')
#regs['vd']	= ( 7, 5, '+VPREG',   'op_rd')
#regs['vs3']	= ( 7, 5, '+VPREG',   'op.rs3')

#regs['rs1']	= (15, 5, '+GPREG',   'op_rs1')
#regs['fs1']	= (15, 5, '+FPREG',   'op_rs1')
#regs['vs1']	= (15, 5, '+VPREG',   'op_rs1')

#regs['rs2']	= (20, 5, '+GPREG',   'op.rs2')
#regs['fs2']	= (20, 5, '+FPREG',   'op.rs2')
#regs['vs2']	= (20, 5, '+VPREG',   'op.rs2')

#regs['rs3']	= (27, 5, '+GPREG',   'op.rs3')
#regs['fs3']	= (27, 5, '+FPREG',   'op.rs3')

#regs['vm']	= (25, 1, '+VMREG',   'op_vm')

regs['cfd']	= ( 2, 3, '+8+FPREG', 0)
regs['crd']	= ( 2, 3, '+8+GPREG', 0)
regs['cs2']	= ( 2, 3, '+8+GPREG', 2)
regs['ds2']	= ( 2, 3, '+8+FPREG', 2)
regs['fs4']	= ( 2, 5, '+FPREG',   2)
regs['rs4']	= ( 2, 5, '+GPREG',   2)
regs['cs1']	= ( 7, 3, '+8+GPREG', 1)
regs['cd1']	= ( 7, 3, '+8+GPREG', 0, 1)
regs['rd1']	= ( 7, 5, '+GPREG',   0, 1)
regs['rs5']	= ( 7, 5, '+GPREG',   1)

regs['rd']	= ( 7, 5, '+GPREG',   0)
regs['fd']	= ( 7, 5, '+FPREG',   0)
regs['vd']	= ( 7, 5, '+VPREG',   0)
regs['vs3']	= ( 7, 5, '+VPREG',   3)

regs['rs1']	= (15, 5, '+GPREG',   1)
regs['fs1']	= (15, 5, '+FPREG',   1)
regs['vs1']	= (15, 5, '+VPREG',   1)

regs['rs2']	= (20, 5, '+GPREG',   2)
regs['fs2']	= (20, 5, '+FPREG',   2)
regs['vs2']	= (20, 5, '+VPREG',   2)

regs['rs3']	= (27, 5, '+GPREG',   3)
regs['fs3']	= (27, 5, '+FPREG',   3)

regs['vm']	= (25, 1, '+VMREG',   3)

for name in opcodes:
    pos = 0
    code = 0
    mask = 0
    immed = []
    bigimm = 0
    registers = [ 'NOREG' ]*4
    if 'type' in opcodes[name]:
        type = opcodes[name]['type']
    else:
        type = 'none'
    if type=='csl' or type=='css' or type=='crs' or type=='cds':
        registers[1] = '2'
    if type=='cjl':
        registers[0] = '1'
    if type=='cds':
        registers[0] = '2'
    if re.match(r'f\w+\.', name):
        b = opcodes[name]['bits']
        if re.match(r'.*\.[wl]u?\.[sd]|(feq|flt|fle|fclass)\.[sd]|fmv\.x\.[wd]', name):
            b = b.replace('rs1', 'fs1')
        elif re.match(r'.*\.[sd]u?\.[wl]u?|fmv\.[wd]\.x', name):
            b = b.replace('rd', 'fd')
        elif re.match(r'f\w+\.[sd]', name):
            b = b.replace('rd',  'fd')
            b = b.replace('rs1', 'fs1')
            b = b.replace('rs2', 'fs2')
            b = b.replace('rs3', 'fs3')
        opcodes[name]['bits'] = b
    if 'bits' not in opcodes[name]:
        continue
    for b in reversed(opcodes[name]['bits'].split()):
        if re.match('[01]+', b):
            code |= int(b, 2) << pos
            mask |= ((1<<len(b))-1) << pos
            pos += len(b)
        elif re.match(r'\{[^}]+\}', b):
            tuple = []
            signed = False
            i = 0
            if b[1] == '-':
                signed = True
                i = 1
            while b[i] != '}':
                i += 1
                m = re.match(r'(\d+)(:\d+)?', b[i:])
                if not m:
                    eprint('Bad immediate', name, b[i:])
                    exit(-1)
                hi = int(m.group(1))
                lo = hi
                if m.group(2):
                    lo = int(m.group(2)[1:])
                tuple.append((hi, lo))
                i += len(m.group(0))
            for (hi, lo) in reversed(tuple[1:]):
                shift = lo and '<<{:d}'.format(lo) or ''
                immed.append('x({:d},{:d}){:s}'.format(pos, hi-lo+1, shift))
                pos += hi-lo+1
            (hi, lo) = tuple[0]
            if hi >= 13:
                bigimm = 1
            shift = lo and '<<{:d}'.format(lo) or ''
            immed.append('{:s}({:d},{:d}){:s}'.format(signed and 'xs' or 'x', pos, hi-lo+1, shift))
            pos += hi-lo+1
        else:
            lo = regs[b][0]
            width = regs[b][1]
            offset = regs[b][2]
            for rn in regs[b][3:]:
                registers[rn] = 'x({:d},{:d}){:s}'.format(lo, width, offset)
            pos += width
    if pos == 16:
        opcodes[name]['len'] = 2
    elif pos == 32:
        opcodes[name]['len'] = 4
    else:
        eprint('Illegal length', name, pos, 'bits', opcodes[name]['bits'])
        eprint(immed)
        exit(-1)
    regstr = ';'.join(registers)
    if immed:
        immstr = '|'.join(immed)
    else:
        immstr = 'NONE'
    opcodes[name]['decode'] = '{:x} {:x} {:s} {:s} {:d}'.format(mask, code, regstr, immstr, bigimm)

newlist = OrderedDict()
opcode_list = ['ZERO']
# First come all the compressed instructions
for name in opcodes:
    if re.match(r'c\.', name):
        opcode_list.append(name)
        last_compressed_opcode = name
# Next all the fast uncompressed instructions
for name in opcodes:
    if re.match(r'c\.', name):  continue
    if 'fast' in opcodes[name]:
        opcode_list.append(name)
# Last all the spike-semantics instructions
for name in opcodes:
    if re.match(r'c\.', name):  continue
    if 'fast' not in opcodes[name]:
        opcode_list.append(name)
opcode_list.append('ILLEGAL')
opcode_list.append('UNKNOWN')
    
for name in opcode_list:
    newlist[name] = {}
    if name not in opcodes:
        continue
    flags = []
    if 'type' in opcodes[name]:
        flags.append('type_'+opcodes[name]['type'])
    else:
        flags.append('type_none')
    if 'ext' in opcodes[name]:
        for e in opcodes[name]['ext'].split(','):
            flags.append('isa_'+e)
    else:
        flags.append('isa_I')
    if 'flags' in opcodes[name]:
        for f in opcodes[name]['flags'].split(','):
            flags.append(f)
        newlist[name]['flags'] = ','.join(flags)
    if 'bits' in opcodes[name]:
        newlist[name]['bits'] = opcodes[name]['bits']
    if 'exec' in opcodes[name]:
        newlist[name]['exec'] = opcodes[name]['exec']
    if 'fast' in opcodes[name]:
        newlist[name]['fast'] = opcodes[name]['fast']
    newlist[name]['len'] = opcodes[name]['len']
    if 'decode' in opcodes[name]:
        newlist[name]['decode'] = opcodes[name]['decode']

json.dump(newlist, sys.stdout, indent=4)

