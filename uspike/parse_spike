#!/usr/bin/env python

from builtins import hex
from builtins import range
import math
import sys
import re
import os
import json
from collections import OrderedDict

def eprint(*args):
    sys.stderr.write(' '.join(map(str,args)) + '\n')

regs = {}
regs['WRITE_RD']	= ('rd',  'rd')
regs['RS1']		= ('rs1', 'rs1')
regs['RS2']		= ('rs2', 'rs2')
regs['RS3']		= ('rs3', 'rs3')
regs['WRITE_FRD']	= ('rd',  'fd')
regs['FRS1']		= ('rs1', 'fs1')
regs['FRS2']		= ('rs2', 'fs2')
regs['FRS3']		= ('rs3', 'fs3')

insns = sys.argv[1]
if insns[-1] != '/':
    insns += '/'

opcodes = OrderedDict()
extensions = {}
for fn in sys.argv[2:]:
    with open(fn) as f:
        d = json.load(f)
    opcodes = {**opcodes, **d}

for name in opcodes.copy():
    if 'spike' in opcodes[name]:
        fname = insns + opcodes[name]['spike'].replace('.','_') + '.h'
    else:
        fname = insns + name.replace('.','_') + '.h'
    opcode = opcodes[name]
    action = 'BAD BAD BAD'
    if os.path.exists(fname):
        with open(fname, 'r') as f:
            action = f.read()
        if re.search('require_privilege.*PRV_[MS]', action):
            eprint('Removing kernel or supervisor instruction', name)
            del opcodes[name]
            continue
    else:
        del opcodes[name]
        continue
    args = {}
    for k in regs.keys():
        if re.search('[^a-zA-Z_]'+k+'[^a-zA-Z_]', action):
            args[regs[k][0]] = regs[k][1]
    if opcode['type'] == 'c':
        b = opcode['bits']
    else:
        tuple = opcode['bits'].split()
        for i in range(len(tuple)):
#            if re.match('[01]*|\{[^}]+\}', tuple[i]):
#                continue
            if tuple[i] in args:
                tuple[i] = args[tuple[i]]
        b = ''
        l = len(tuple)
        if l==3:
            b += '{:32s} {:8s} {:7s}'.format(*tuple)
        elif l==4:
            b += '{:12s} {:7s} {:7s} {:s}'.format(*tuple)
        elif l==5:
            b += '{:18s} {:7s} {:5s} {:8s} {:7s}'.format(*tuple)
        elif l==6:
            b += '{:10s} {:7s} {:7s} {:5s} {:8s} {:7s}'.format(*tuple)
        elif l==7:
            b += '{:6s} {:3s} {:5s}   {:7s} {:5s} {:8s} {:7s}'.format(*tuple)
        else:
            for t in tuple:
                b += "{:11s} ".format(t)
    ext = []
    for m in re.finditer(r"require_extension\(([^)]+)\)", action):
        x = m.group(1)
        n = re.match("'([a-zA-Z])'", x)
        if n:  x = n.group(1)
        ext.append(x)
        extensions[x] = 1
    flags = {}
    if re.search("set_pc", action):
        flags['pc'] = 1
    if re.search("require_fp;", action):
        flags['fp'] = 1
    if re.search(r"MMU\.|VI_LD_|VI_ST_", action):
        flags['mmu'] = 1
    if re.search("amo_|VI_AMO", action):
        flags['amo'] = 1
        flags['mmu'] = 1
    if re.search("_reservation", action):
        flags['lrsc'] = 1
    for e in ext:
        extensions[e] = 1
    if ext:
        opcodes[name]['ext'] = ','.join(ext)
    if flags:
        opcodes[name]['flags'] = ','.join(flags)
    opcodes[name]['exec'] = action

for k in sorted(extensions.keys()):
    eprint('Extension', k)
    
json.dump(opcodes, sys.stdout, indent=4)

