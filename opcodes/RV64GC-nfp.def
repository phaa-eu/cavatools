#  Opcode	Assembler	Attributes		     Instruction Format				Register Fields				C++ Semantics

# RVC Compressed Instruction Set, Quadrant 0

   c.addi4spn	Ct,Cc,CK	C			     "000 {5:4|9:6|2|3}        ... 00"		l[4:2]+8,2,-,-				"wrd(r1+imm)"
   c.fld	CD,Cl(Cs)	C,D,ld			     "001 {5:3}    ... {7:6}   ... 00"		d[4:2]+8,l[9:7]+8,-,-			"wfd(f64(LOAD(uint64_t, r1+imm)))"
   c.lw		Ct,Cl(Cs)	C,ld			     "010 {5:3}    ... {2|6}   ... 00"		w[4:2]+8,l[9:7]+8,-,-			"wrd(    LOAD( int32_t, r1+imm))"
   c.ld		Ct,Cl(Cs)	C,ld			     "011 {5:3}    ... {7:6}   ... 00"		l[4:2]+8,l[9:7]+8,-,-			"wrd(    LOAD( int64_t, r1+imm))"
   c.fsd	CD,Cl(Cs)	C,D,st			     "101 {5:3}    ... {7:6}   ... 00"		-,l[9:7]+8,f[4:2]+8,-			"STORE(uint64_t, r1+imm, f2.v[0])"
   c.sw		Ct,Cl(Cs)	C,st			     "110 {5:3}    ... {2|6}   ... 00"		-,l[9:7]+8,w[4:2]+8,-			"STORE(int32_t,  r1+imm, r2)"
   c.sd		Ct,Cl(Cs)	C,st			     "111 {5:3}    ... {7:6}   ... 00"		-,l[9:7]+8,l[4:2]+8,-			"STORE(int64_t,  r1+imm, r2)"

# RVC Compressed Instruction Set, Quadrant 1

   c.addi	rd		C			     "000 {-5}   ..... {4:0}       01"		l[11:7],l[11:7],-,-			"wrd(r1 + imm)"
   c.addiw	rd		C			     "001 {-5}   ..... {4:0}       01"		w[11:7],l[11:7],-,-			"wrd(int32_t(r1) + int32_t(imm))"
   c.li		rd		C			     "010 {-5}   ..... {4:0}       01"		l[11:7],-,-,-				"wrd(imm)"
   c.addi16sp	-		C		     	     "011 {-9}   00010 {4|6|8:7|5} 01"		2,2,-,-					"wrd(r1+imm)"
   c.lui	rd		C			     "011 {-17}  ..... {16:12}     01"		l[11:7],-				"wrd(imm)"
   c.srli	rd		C			     "100 {5}   00 ... {4:0}       01"		l[9:7]+8,l[9:7]+8,-,-			"wrd(uint64_t(r1) >> imm)"
   c.srai	rd		C			     "100 {5}   01 ... {4:0}       01"		l[9:7]+8,l[9:7]+8,-,-			"wrd( int64_t(r1) >> imm)"
   c.andi	rd		C			     "100 {-5}  10 ... {4:0}       01"		l[9:7]+8,l[9:7]+8,-,-			"wrd(r1 & imm)"
   c.sub	rd,rs2		C			     "100 0     11 ...      00 ... 01"		l[9:7]+8,l[9:7]+8,l[4:2]+8,-		"wrd(r1 - r2)"
   c.xor	rd,rs2		C			     "100 0     11 ...      01 ... 01"		l[9:7]+8,l[9:7]+8,l[4:2]+8,-		"wrd(r1 ^ r2)"
   c.or		rd,rs2		C			     "100 0     11 ...      10 ... 01"		l[9:7]+8,l[9:7]+8,l[4:2]+8,-		"wrd(r1 | r2)"
   c.and	rd,rs2		C			     "100 0     11 ...      11 ... 01"		l[9:7]+8,l[9:7]+8,l[4:2]+8,-		"wrd(r1 & r2)"
   c.subw	rd,rs2		C			     "100 1     11 ...      00 ... 01"		w[9:7]+8,w[9:7]+8,w[4:2]+8,-		"wrd(int32_t(r1) - int32_t(r2))"
   c.addw	rd,rs2		C			     "100 1     11 ...      01 ... 01"		w[9:7]+8,w[9:7]+8,w[4:2]+8,-		"wrd(int32_t(r1) + int32_t(r2))"
   c.j		-		C,uj,>			     "101 {-11|4|9:8|10|6|7|3:1|5} 01"		-,-,-,-					"jump(pc+imm)"
   c.beqz	rs1		C,cj,>			     "110 {-8|4:3} ... {7:6|2:1|5} 01"		-,l[9:7]+8,-,-				"branch(r1==0, pc+imm, pc+2)"
   c.bnez	rs1		C,cj,>			     "111 {-8|4:3} ... {7:6|2:1|5} 01"		-,l[9:7]+8,-,-				"branch(r1!=0, pc+imm, pc+2)"

# RVC Compressed Instruction Set, Quadrant 1

   c.slli	rd		C			     "000 {5}    ..... {4:0}       10"		l[11:7],l[11:7],-,-			"wrd(uint64_t(r1) << imm)"
   c.fldsp	fd		C,D,ld			     "001 {5}    ..... {4:3|8:6}   10"		d[11:7],2,-,-				"wfd(f64(LOAD(uint64_t, r1+imm)))"
   c.lwsp	rd		C,ld			     "010 {5}    ..... {4:2|7:6}   10"		w[11:7],2,-,-				"wrd(LOAD(int32_t, r1+imm))"
   c.ldsp	rd		C,ld			     "011 {5}    ..... {4:3|8:6}   10"		l[11:7],2,-,-				"wrd(LOAD(int64_t, r1+imm))"
   c.ret	rs1		C,uj,>			     "100 0      00001       00000 10"		-,1,-,-					"reg_jump(r1)"
   c.jr		rs1		C,uj,>			     "100 0      .....       00000 10"		-,l[11:7],-,-				"reg_jump(r1)"
   c.mv		rd,rs2		C			     "100 0      .....       ..... 10"		l[11:7],-,l[6:2],-			"wrd(r2)"
   c.ebreak	-		C,ex			     "100 1      00000       00000 10"		-,-,-,-					"ebreak()"
   c.jalr	rs1		C,uj,>			     "100 1      .....       00000 10"		1,l[11:7],-,-				"{ long npc=r1; wrd(pc+2); jump(npc); }"

   c.add	rd,rs2		C			     "100 1      .....       ..... 10"		l[11:7],l[11:7],l[6:2],-		"wrd(r1 + r2)"
   c.fsdsp	fs2		C,D,st			     "101 {5:3|8:6}          ..... 10"		-,2,d[6:2],-				"STORE(uint64_t, r1+imm, f2.v[0])"
   c.swsp	rs2		C,st			     "110 {5:2|7:6}          ..... 10"		-,2,w[6:2],-				"STORE( int32_t, r1+imm, r2)"
   c.sdsp	rs2		C,st			     "111 {5:3|8:6}          ..... 10"		-,2,l[6:2],-				"STORE( int64_t, r1+imm, r2)"

# RV32I Base Instruction Set

   lui		d,u		I		"{-31:12}                      ..... 01101 11"		l[11:7],-				"wrd(   imm)"
   auipc	d,u		I		"{-31:12}                      ..... 00101 11"		l[11:7],-				"wrd(pc+imm)"

   j		a		I,uj,>		"{-20|10:1|11|19:12}           00000 11011 11"		l[11:7],-				"           jump(pc+imm)"
   jal		d,a		I,uj,>		"{-20|10:1|11|19:12}           ..... 11011 11"		l[11:7],-				"wrd(pc+4); jump(pc+imm)"
   ret		d,s		I,uj,>		"{-11:0}           ..... 000   00000 11001 11"		-,l[19:15],-,-				"reg_jump((r1+imm)&~1L)"
   jalr		d,s		I,uj,>		"{-11:0}           ..... 000   ..... 11001 11"		l[11:7],l[19:15],-,-			"{ long npc=(r1+imm)&~1L; wrd(pc+4); reg_jump(npc); }"

   beq		s,t,p		I,cj,>		"{-12|10:5}  ..... ..... 000 {4:1|11} 1100011"		-,l[19:15],l[24:20],-			"branch( int64_t(r1)== int64_t(r2), pc+imm, pc+4)"
   bne		s,t,p		I,cj,>		"{-12|10:5}  ..... ..... 001 {4:1|11} 1100011"		-,l[19:15],l[24:20],-			"branch( int64_t(r1)!= int64_t(r2), pc+imm, pc+4)"
   blt		s,t,p		I,cj,>		"{-12|10:5}  ..... ..... 100 {4:1|11} 1100011"		-,l[19:15],l[24:20],-			"branch( int64_t(r1)<  int64_t(r2), pc+imm, pc+4)"
   bge		s,t,p		I,cj,>		"{-12|10:5}  ..... ..... 101 {4:1|11} 1100011"		-,l[19:15],l[24:20],-			"branch( int64_t(r1)>= int64_t(r2), pc+imm, pc+4)"
   bltu		s,t,p		I,cj,>		"{-12|10:5}  ..... ..... 110 {4:1|11} 1100011"		-,l[19:15],l[24:20],-			"branch(uint64_t(r1)< uint64_t(r2), pc+imm, pc+4)"
   bgeu		s,t,p		I,cj,>		"{-12|10:5}  ..... ..... 111 {4:1|11} 1100011"		-,l[19:15],l[24:20],-			"branch(uint64_t(r1)>=uint64_t(r2), pc+imm, pc+4)"

   lb		d,o(s)		I,ld		"{-11:0}           ..... 000   ..... 00000 11"		b[11:7],l[19:15],-,-			"wrd(LOAD( int8_t,  r1+imm))"
   lh		d,o(s)		I,ld		"{-11:0}           ..... 001   ..... 00000 11"		h[11:7],l[19:15],-,-			"wrd(LOAD( int16_t, r1+imm))"
   lw		d,o(s)		I,ld		"{-11:0}           ..... 010   ..... 00000 11"		w[11:7],l[19:15],-,-			"wrd(LOAD( int32_t, r1+imm))"
   lbu		d,o(s)		I,ld		"{-11:0}           ..... 100   ..... 00000 11"		ub[11:7],l[19:15],-,-			"wrd(LOAD(uint8_t,  r1+imm))"
   lhu		d,o(s)		I,ld		"{-11:0}           ..... 101   ..... 00000 11"		uh[11:7],l[19:15],-,-			"wrd(LOAD(uint16_t, r1+imm))"
   sb		t,q(s)		I,st		"{-11:5}     ..... ..... 000   {4:0} 01000 11"		-,l[19:15],b[24:20],-			"STORE(int8_t,  r1+imm, r2)"
   sh		t,q(s)		I,st		"{-11:5}     ..... ..... 001   {4:0} 01000 11"		-,l[19:15],h[24:20],-			"STORE(int16_t, r1+imm, r2)"
   sw		t,q(s)		I,st		"{-11:5}     ..... ..... 010   {4:0} 01000 11"		-,l[19:15],w[24:20],-			"STORE(int32_t, r1+imm, r2)"

   addi		d,s,j		I		"{-11:0}           ..... 000   ..... 00100 11"		l[11:7],l[19:15],-,-			"wrd(r1 + imm)"
   slti		d,s,j		I		"{-11:0}           ..... 010   ..... 00100 11"		l[11:7],l[19:15],-,-			"wrd( int64_t(r1) <  int64_t(imm))"
   sltiu	d,s,j		I		"{-11:0}           ..... 011   ..... 00100 11"		l[11:7],l[19:15],-,-			"wrd(uint64_t(r1) < uint64_t(imm))"
   xori		d,s,j		I		"{-11:0}           ..... 100   ..... 00100 11"		l[11:7],l[19:15],-,-			"wrd(uint64_t(r1) ^ uint64_t(imm))"
   ori		d,s,j		I		"{-11:0}           ..... 110   ..... 00100 11"		l[11:7],l[19:15],-,-			"wrd(uint64_t(r1) | uint64_t(imm))"
   andi		d,s,j		I		"{-11:0}           ..... 111   ..... 00100 11"		l[11:7],l[19:15],-,-			"wrd(uint64_t(r1) & uint64_t(imm))"
   slli		d,s,>		I		"000000      {5:0} ..... 001   ..... 00100 11"		l[11:7],l[19:15],-,-			"wrd(uint64_t(r1) << imm)"
   srli		d,s,>		I		"000000      {5:0} ..... 101   ..... 00100 11"		l[11:7],l[19:15],-,-			"wrd(uint64_t(r1) >> imm)"
   srai		d,s,>		I		"010000      {5:0} ..... 101   ..... 00100 11"		l[11:7],l[19:15],-,-			"wrd( int64_t(r1) >> imm)"

   add		d,s,t		I		"0000000     ..... ..... 000   ..... 01100 11"		l[11:7],l[19:15],l[24:20],-		"wrd(r1 + r2)"
   sub		d,s,t		I		"0100000     ..... ..... 000   ..... 01100 11"		l[11:7],l[19:15],l[24:20],-		"wrd(r1 - r2)"
   sll		d,s,t		I		"0000000     ..... ..... 001   ..... 01100 11"		l[11:7],l[19:15],l[24:20],-		"wrd(uint64_t(r1) << uint64_t(r2))"
   slt		d,s,t		I		"0000000     ..... ..... 010   ..... 01100 11"		l[11:7],l[19:15],l[24:20],-		"wrd( int64_t(r1) <   int64_t(r2))"
   sltu		d,s,t		I		"0000000     ..... ..... 011   ..... 01100 11"		l[11:7],l[19:15],l[24:20],-		"wrd(uint64_t(r1) <  uint64_t(r2))"
   xor		d,s,t		I		"0000000     ..... ..... 100   ..... 01100 11"		l[11:7],l[19:15],l[24:20],-		"wrd(r1 ^ r2)"
   srl		d,s,t		I		"0000000     ..... ..... 101   ..... 01100 11"		l[11:7],l[19:15],l[24:20],-		"wrd(uint64_t(r1) >> uint64_t(r2))"
   sra		d,s,t		I		"0100000     ..... ..... 101   ..... 01100 11"		l[11:7],l[19:15],l[24:20],-		"wrd( int64_t(r1) >>  int64_t(r2))"
   or		d,s,t		I		"0000000     ..... ..... 110   ..... 01100 11"		l[11:7],l[19:15],l[24:20],-		"wrd(r1 | r2)"
   and		d,s,t		I		"0000000     ..... ..... 111   ..... 01100 11"		l[11:7],l[19:15],l[24:20],-		"wrd(r1 & r2)"

   fence	rd,rs1		<,I,ex,>	"{11:0}            ..... 000   ..... 00011 11"		l[11:7],l[19:15],-,-			"fence(imm)"
   fence.i	rd,rs1		<,I,ex,>	"{11:0}            ..... 001   ..... 00011 11"		l[11:7],l[19:15],-,-			"fence_i(imm)"
   ecall	-		<,I,ex,>	"000000000000      00000 000   00000 11100 11"		10,10,-,-				"wrd(riscv_syscall(this, r1))"
   ebreak	-		I,ex		"000000000001      00000 000   00000 11100 11"		-,-,-,-					"ebreak()"

   csrrw	d,E,s		<,I,sr,>	"{11:0}            ..... 001   ..... 11100 11"		l[11:7],l[19:15],-,-			"wrd(csr_func(imm,       [&](uint64_t old) { return        r1;                  } ))"
   csrrs	d,E,s		<,I,sr,>	"{11:0}            ..... 010   ..... 11100 11"		l[11:7],l[19:15],-,-			"wrd(csr_func(imm,       [&](uint64_t old) { return old |  r1;                  } ))"
   csrrc	d,E,s		<,I,sr,>	"{11:0}            ..... 011   ..... 11100 11"		l[11:7],l[19:15],-,-			"wrd(csr_func(imm,       [&](uint64_t old) { return old & ~r1;                  } ))"
   csrrwi	d,E,Z		<,I,sr,>	"{11:0}          {16:12} 101   ..... 11100 11"		l[11:7],-,-,-				"wrd(csr_func(imm&0xFFF, [&](uint64_t old) { return                  (imm>>12); } ))"
   csrrsi	d,E,Z		<,I,sr,>	"{11:0}          {16:12} 110   ..... 11100 11"		l[11:7],-,-,-				"wrd(csr_func(imm&0xFFF, [&](uint64_t old) { return old |            (imm>>12); } ))"
   csrrci	d,E,Z		<,I,sr,>	"{11:0}          {16:12} 111   ..... 11100 11"		l[11:7],-,-,-				"wrd(csr_func(imm&0xFFF, [&](uint64_t old) { return old & ~(uint64_t)(imm>>12); } ))"

# RV64I Base Instruction Set (in addition to RV32I)

   lwu		d,o(s)		I,ld		"{-11:0}           ..... 110   ..... 00000 11"		wu[11:7],l[19:15],-,-			"wrd(LOAD(uint32_t, r1+imm))"
   ld		d,o(s)		I,ld		"{-11:0}           ..... 011   ..... 00000 11"		lul[11:7],l[19:15],-,-			"wrd(LOAD(int64_t,  r1+imm))"
   sd		t,q(s)		I,st		"{-11:5}     ..... ..... 011   {4:0} 01000 11"		-,l[19:15],l[24:20],-			"STORE(int64_t, r1+imm, r2)"

   addiw	d,s,j		I		"{-11:0}           ..... 000   ..... 00110 11"		w[11:7],w[19:15],-,-			"wrd( int32_t(r1) +  int32_t(imm))"
   slliw	d,s,<		I		"0000000     {4:0} ..... 001   ..... 00110 11"		w[11:7],w[19:15],-,-			"wrd(uint32_t(r1) << imm)"
   srliw	d,s,<		I		"0000000     {4:0} ..... 101   ..... 00110 11"		w[11:7],w[19:15],-,-			"wrd(uint32_t(r1) >> imm)"
   sraiw	d,s,<		I		"0100000     {4:0} ..... 101   ..... 00110 11"		w[11:7],w[19:15],-,-			"wrd( int32_t(r1) >> imm)"

   addw		d,s,t		I		"0000000     ..... ..... 000   ..... 01110 11"		w[11:7],w[19:15],w[24:20],-		"wrd( int32_t(r1) +   int32_t(r2))"
   subw		d,s,t		I		"0100000     ..... ..... 000   ..... 01110 11"		w[11:7],w[19:15],w[24:20],-		"wrd( int32_t(r1) -   int32_t(r2))"
   sllw		d,s,t		I		"0000000     ..... ..... 001   ..... 01110 11"		w[11:7],w[19:15],w[24:20],-		"wrd(uint32_t(r1) << uint32_t(r2))"
   srlw		d,s,t		I		"0000000     ..... ..... 101   ..... 01110 11"		w[11:7],w[19:15],w[24:20],-		"wrd(uint32_t(r1) >> uint32_t(r2))"
   sraw		d,s,t		I		"0100000     ..... ..... 101   ..... 01110 11"		w[11:7],w[19:15],w[24:20],-		"wrd( int32_t(r1) >>  int32_t(r2))"

# RV32M Standard Extension

   mul		d,s,t		M		"0000001     ..... ..... 000   ..... 01100 11"		l[11:7],l[19:15],l[24:20],-		"wrd(r1 * r2)"
   mulh		d,s,t		M		"0000001     ..... ..... 001   ..... 01100 11"		l[11:7],l[19:15],l[24:20],-		"wrd(mulh  (r1, r2))"
   mulhsu	d,s,t		M		"0000001     ..... ..... 010   ..... 01100 11"		l[11:7],l[19:15],l[24:20],-		"wrd(mulhsu(r1, r2))"
   mulhu	d,s,t		M		"0000001     ..... ..... 011   ..... 01100 11"		l[11:7],l[19:15],l[24:20],-		"wrd(mulhu (r1, r2))"
   div		d,s,t		M		"0000001     ..... ..... 100   ..... 01100 11"		l[11:7],l[19:15],l[24:20],-		"wrd(r2==0 ?  INT64_MAX : (r1==INT64_MIN && r2==-1) ? r1 : r1/r2)"
   divu		d,s,t		M		"0000001     ..... ..... 101   ..... 01100 11"		l[11:7],l[19:15],l[24:20],-		"wrd(r2==0 ? UINT64_MAX : (uint64_t)r1/(uint64_t)r2             )"
   rem		d,s,t		M		"0000001     ..... ..... 110   ..... 01100 11"		l[11:7],l[19:15],l[24:20],-		"wrd(r2==0 ?  INT64_MAX : (r1==INT64_MIN && r2==-1) ? r1 : r1%r2)"
   remu		d,s,t		M		"0000001     ..... ..... 111   ..... 01100 11"		l[11:7],l[19:15],l[24:20],-		"wrd(r2==0 ? UINT64_MAX : (uint64_t)r1%(uint64_t)r2             )"

# RV64M Standard Extension (in addition to RV32M)

   mulw		d,s,t		M		"0000001     ..... ..... 000   ..... 01110 11"		w[11:7],w[19:15],w[24:20],-		"wrd((int32_t)r1 * (int32_t)r2)"
   divw		d,s,t		M		"0000001     ..... ..... 100   ..... 01110 11"		w[11:7],w[19:15],w[24:20],-		"wrd(r2==0 ? UINT64_MAX : ( int32_t)r1/( int32_t)r2)"
   divuw	d,s,t		M		"0000001     ..... ..... 101   ..... 01110 11"		w[11:7],w[19:15],w[24:20],-		"wrd(r2==0 ? UINT64_MAX : (uint32_t)r1/(uint32_t)r2)"
   remw		d,s,t		M		"0000001     ..... ..... 110   ..... 01110 11"		w[11:7],w[19:15],w[24:20],-		"wrd(r2==0 ? UINT64_MAX : ( int32_t)r1%( int32_t)r2)"
   remuw	d,s,t		M		"0000001     ..... ..... 111   ..... 01110 11"		w[11:7],w[19:15],w[24:20],-		"wrd(r2==0 ? UINT64_MAX : (uint32_t)r1%(uint32_t)r2)"

# RV32A Standard Extension

   lr.w		d,0(s)		A,amo,ld	"00010 {1:0} 00000 ..... 010   ..... 01011 11"		w[11:7],l[19:15],-,-			"wrd(load_reserved(int32_t, r1))"
   sc.w		d,t,0(s)	A,amo,st,>	"00011 {1:0} ..... ..... 010   ..... 01011 11"		l[11:7],l[19:15],w[24:20],-		"wrd(store_conditional(int32_t, r1, r2))"
   amoswap.w	d,t,0(s)	A,amo,ld,st,>	"00001 {1:0} ..... ..... 010   ..... 01011 11"		w[11:7],l[19:15],w[24:20],-		"wrd(amo_int32(r1, [&](int32_t lhs) { return       r2; }, ap))"
   amoadd.w	d,t,0(s)	A,amo,ld,st,>	"00000 {1:0} ..... ..... 010   ..... 01011 11"		w[11:7],l[19:15],w[24:20],-		"wrd(amo_int32(r1, [&](int32_t lhs) { return lhs + r2; }, ap))"
   amoxor.w	d,t,0(s)	A,amo,ld,st,>	"00100 {1:0} ..... ..... 010   ..... 01011 11"		w[11:7],l[19:15],w[24:20],-		"wrd(amo_int32(r1, [&](int32_t lhs) { return lhs ^ r2; }, ap))"
   amoand.w	d,t,0(s)	A,amo,ld,st,>	"01100 {1:0} ..... ..... 010   ..... 01011 11"		w[11:7],l[19:15],w[24:20],-		"wrd(amo_int32(r1, [&](int32_t lhs) { return lhs & r2; }, ap))"
   amoor.w	d,t,0(s)	A,amo,ld,st,>	"01000 {1:0} ..... ..... 010   ..... 01011 11"		w[11:7],l[19:15],w[24:20],-		"wrd(amo_int32(r1, [&](int32_t lhs) { return lhs | r2; }, ap))"
   amomin.w	d,t,0(s)	A,amo,ld,st,>	"10000 {1:0} ..... ..... 010   ..... 01011 11"		w[11:7],l[19:15],w[24:20],-		"wrd(amo_int32(r1, [&](int32_t lhs) { return std::min(lhs,  int32_t(r2)); }, ap))"
   amomax.w	d,t,0(s)	A,amo,ld,ld,st,>	"10100 {1:0} ..... ..... 010   ..... 01011 11"		w[11:7],l[19:15],w[24:20],-		"wrd(amo_int32(r1, [&](int32_t lhs) { return std::max(lhs,  int32_t(r2)); }, ap))"
   amominu.w	d,t,0(s)	A,amo,ld,st,>	"11000 {1:0} ..... ..... 010   ..... 01011 11"		w[11:7],l[19:15],w[24:20],-		"wrd((uint32_t)amo_int32(r1, [&](uint32_t lhs) { return std::min(lhs, uint32_t(r2)); }, ap))"
   amomaxu.w	d,t,0(s)	A,amo,ld,st,>	"11100 {1:0} ..... ..... 010   ..... 01011 11"		w[11:7],l[19:15],w[24:20],-		"wrd((uint32_t)amo_int32(r1, [&](uint32_t lhs) { return std::max(lhs, uint32_t(r2)); }, ap))"

   lr.d		d,0(s)		A,amo,ld	"00010 {1:0} 00000 ..... 011   ..... 01011 11"		l[11:7],l[19:15],-,-			"wrd(load_reserved(int64_t,  r1))"
   sc.d		d,t,0(s)	A,amo,st,>	"00011 {1:0} ..... ..... 011   ..... 01011 11"		l[11:7],l[19:15],l[24:20],-		"wrd(store_conditional(int64_t, r1, r2))"
   amoswap.d	d,t,0(s)	A,amo,ld,st,>	"00001 {1:0} ..... ..... 011   ..... 01011 11"		l[11:7],l[19:15],l[24:20],-		"wrd(amo_int64(r1, [&](int64_t lhs) { return       r2; }, ap))"
   amoadd.d	d,t,0(s)	A,amo,ld,st,>	"00000 {1:0} ..... ..... 011   ..... 01011 11"		l[11:7],l[19:15],l[24:20],-		"wrd(amo_int64(r1, [&](int64_t lhs) { return lhs + r2; }, ap))"
   amoxor.d	d,t,0(s)	A,amo,ld,st,>	"00100 {1:0} ..... ..... 011   ..... 01011 11"		l[11:7],l[19:15],l[24:20],-		"wrd(amo_int64(r1, [&](int64_t lhs) { return lhs ^ r2; }, ap))"
   amoand.d	d,t,0(s)	A,amo,ld,st,>	"01100 {1:0} ..... ..... 011   ..... 01011 11"		l[11:7],l[19:15],l[24:20],-		"wrd(amo_int64(r1, [&](int64_t lhs) { return lhs & r2; }, ap))"
   amoor.d	d,t,0(s)	A,amo,ld,st,>	"01000 {1:0} ..... ..... 011   ..... 01011 11"		l[11:7],l[19:15],l[24:20],-		"wrd(amo_int64(r1, [&](int64_t lhs) { return lhs | r2; }, ap))"
   amomin.d	d,t,0(s)	A,amo,ld,st,>	"10000 {1:0} ..... ..... 011   ..... 01011 11"		l[11:7],l[19:15],l[24:20],-		"wrd(amo_int64(r1, [&](int64_t  lhs) { return std::min(lhs,  int64_t(r2)); }, ap))"
   amomax.d	d,t,0(s)	A,amo,ld,st,>	"10100 {1:0} ..... ..... 011   ..... 01011 11"		l[11:7],l[19:15],l[24:20],-		"wrd(amo_int64(r1, [&](int64_t  lhs) { return std::max(lhs,  int64_t(r2)); }, ap))"
   amominu.d	d,t,0(s)	A,amo,ld,st,>	"11000 {1:0} ..... ..... 011   ..... 01011 11"		l[11:7],l[19:15],l[24:20],-		"wrd(amo_int64(r1, [&](uint64_t lhs) { return std::min(lhs, uint64_t(r2)); }, ap))"
   amomaxu.d	d,t,0(s)	A,amo,ld,st,>	"11100 {1:0} ..... ..... 011   ..... 01011 11"		l[11:7],l[19:15],l[24:20],-		"wrd(amo_int64(r1, [&](uint32_t lhs) { return std::max(lhs, uint32_t(r2)); }, ap))"

# Internal instructions to emulate Compare-And-Swap
   cas.w	d,t,0(s),r	A,amo,ld,st,>	"..... 10    ..... ..... 111   ..... 11111 11"		w[11:7],l[19:15],w[24:20],w[31:27]	"wrd(cas32(r1, r2, r3, ap))"
   cas.d	d,t,0(s),r	A,amo,ld,st,>	"..... 11    ..... ..... 111   ..... 11111 11"		l[11:7],l[19:15],l[24:20],l[31:27]	"wrd(cas64(r1, r2, r3, ap))"

# RV32F Standard Extension

   flw		D,o(s)		F,ld		"{-11:0}           ..... 010   ..... 00001 11"		f[11:7],l[19:15],-,-			"wfd(f32(LOAD(uint32_t, r1+imm)))"
   fsw		T,q(s)		F,st		"{-11:5}     ..... ..... 010   {4:0} 01001 11"		-,l[19:15],f[24:20],-			"STORE(uint32_t, r1+imm, f2.v[0])"

   fmadd.s	D,S,T,R,m	F,fp		"..... 00    ..... ..... 111   ..... 10000 11"		f[11:7],f[19:15],f[24:20],f[31:27]	"w32( m32(f1) * m32(f2) + m32(f3) )" 
   fmsub.s	D,S,T,R,m	F,fp		"..... 00    ..... ..... 111   ..... 10001 11"		f[11:7],f[19:15],f[24:20],f[31:27]	"w32( m32(f1) * m32(f2) - m32(f3) )" 
   fnmsub.s	D,S,T,R,m	F,fp		"..... 00    ..... ..... 111   ..... 10010 11"		f[11:7],f[19:15],f[24:20],f[31:27]	"w32(-m32(f1) * m32(f2) + m32(f3) )" 
   fnmadd.s	D,S,T,R,m	F,fp		"..... 00    ..... ..... 111   ..... 10011 11"		f[11:7],f[19:15],f[24:20],f[31:27]	"w32(-m32(f1) * m32(f2) - m32(f3) )" 
																		                                     
   fadd.s	D,S,T,m		F,fp		"00000 00    ..... ..... 111   ..... 10100 11"		f[11:7],f[19:15],f[24:20],-		"w32( m32(f1) + m32(f2) )"	     
   fsub.s	D,S,T,m		F,fp		"00001 00    ..... ..... 111   ..... 10100 11"		f[11:7],f[19:15],f[24:20],-		"w32( m32(f1) - m32(f2) )"	     
   fmul.s	D,S,T,m		F,fp		"00010 00    ..... ..... 111   ..... 10100 11"		f[11:7],f[19:15],f[24:20],-		"w32( m32(f1) * m32(f2) )"	     
   fdiv.s	D,S,T,m		F,fp		"00011 00    ..... ..... 111   ..... 10100 11"		f[11:7],f[19:15],f[24:20],-		"w32( m32(f1) / m32(f2) )"	     
   fsqrt.s	D,S,m		F,fp		"01011 00    00000 ..... 111   ..... 10100 11"		f[11:7],f[19:15],-,-			"w32( std::sqrt( m32(f1) ) )"        

   fmadd.s.rm	D,S,T,R,m	F,fp		"..... 00    ..... ..... {2:0} ..... 10000 11"		f[11:7],f[19:15],f[24:20],f[31:27]	"srm; wfd(f32_mulAdd(f32(f1),                 f32(f2),     f32(f3)            )); sfx"
   fmsub.s.rm	D,S,T,R,m	F,fp		"..... 00    ..... ..... {2:0} ..... 10001 11"		f[11:7],f[19:15],f[24:20],f[31:27]	"srm; wfd(f32_mulAdd(f32(f1),                 f32(f2), f32(f32(f3).v^F32_SIGN))); sfx"
   fnmsub.s.rm	D,S,T,R,m	F,fp		"..... 00    ..... ..... {2:0} ..... 10010 11"		f[11:7],f[19:15],f[24:20],f[31:27]	"srm; wfd(f32_mulAdd(f32(f32(f1).v^F32_SIGN), f32(f2),     f32(f3)            )); sfx"
   fnmadd.s.rm	D,S,T,R,m	F,fp		"..... 00    ..... ..... {2:0} ..... 10011 11"		f[11:7],f[19:15],f[24:20],f[31:27]	"srm; wfd(f32_mulAdd(f32(f32(f1).v^F32_SIGN), f32(f2), f32(f32(f3).v^F32_SIGN))); sfx"

   fadd.s.rm	D,S,T,m		F,fp		"00000 00    ..... ..... {2:0} ..... 10100 11"		f[11:7],f[19:15],f[24:20],-		"srm; wfd(f32_add(f32(f1), f32(f2))); sfx"
   fsub.s.rm	D,S,T,m		F,fp		"00001 00    ..... ..... {2:0} ..... 10100 11"		f[11:7],f[19:15],f[24:20],-		"srm; wfd(f32_sub(f32(f1), f32(f2))); sfx"
   fmul.s.rm	D,S,T,m		F,fp		"00010 00    ..... ..... {2:0} ..... 10100 11"		f[11:7],f[19:15],f[24:20],-		"srm; wfd(f32_mul(f32(f1), f32(f2))); sfx"
   fdiv.s.rm	D,S,T,m		F,fp		"00011 00    ..... ..... {2:0} ..... 10100 11"		f[11:7],f[19:15],f[24:20],-		"srm; wfd(f32_div(f32(f1), f32(f2))); sfx"
   fsqrt.s.rm	D,S,m		F,fp		"01011 00    00000 ..... {2:0} ..... 10100 11"		f[11:7],f[19:15],-,-			"srm; wfd(f32_sqrt(f32(f1)));         sfx"

   fsgnj.s	D,S,T		F,fp		"00100 00    ..... ..... 000   ..... 10100 11"		f[11:7],f[19:15],f[24:20],-		"     wfd(fsgnj_s(f32(f1), f32(f2), false, false))"
   fsgnjn.s	D,S,T		F,fp		"00100 00    ..... ..... 001   ..... 10100 11"		f[11:7],f[19:15],f[24:20],-		"     wfd(fsgnj_s(f32(f1), f32(f2), true,  false))"
   fsgnjx.s	D,S,T		F,fp		"00100 00    ..... ..... 010   ..... 10100 11"		f[11:7],f[19:15],f[24:20],-		"     wfd(fsgnj_s(f32(f1), f32(f2), false,  true))"
   fmin.s	D,S,T		F,fp		"00101 00    ..... ..... 000   ..... 10100 11"		f[11:7],f[19:15],f[24:20],-		"     wfd(fmin_s(f32(f1), f32(f2)))"
   fmax.s	D,S,T		F,fp		"00101 00    ..... ..... 001   ..... 10100 11"		f[11:7],f[19:15],f[24:20],-		"     wfd(fmax_s(f32(f1), f32(f2)))"

   fcvt.w.s	d,S,m		F,fp		"11000 00    00000 ..... {2:0} ..... 10100 11"		l[11:7],f[19:15],-,-			"srm; wrd(f32_to_i32( f32(f1), RM, true)); sfx"
   fcvt.wu.s	d,S,m		F,fp		"11000 00    00001 ..... {2:0} ..... 10100 11"		l[11:7],f[19:15],-,-			"srm; wrd(f32_to_ui32(f32(f1), RM, true)); sfx"
#  fmv.x.w	d,S		F,fp		"11100 00    00000 ..... 000   ..... 10100 11"		l[11:7],f[19:15],-,-			"     wrd(f1.v[0])"
   fmv.x.w	d,S		F		"11100 00    00000 ..... 000   ..... 10100 11"		l[11:7],f[19:15],-,-			"     wrd(f1.v[0])"

   feq.s	d,S,T		F,fp		"10100 00    ..... ..... 010   ..... 10100 11"		l[11:7],f[19:15],f[24:20],-		"     wrd(f32_eq(f32(f1), f32(f2)))"
   flt.s	d,S,T		F,fp		"10100 00    ..... ..... 001   ..... 10100 11"		l[11:7],f[19:15],f[24:20],-		"     wrd(f32_lt(f32(f1), f32(f2)))"
   fle.s	d,S,T		F,fp		"10100 00    ..... ..... 000   ..... 10100 11"		l[11:7],f[19:15],f[24:20],-		"     wrd(f32_lt(f32(f1), f32(f2)))"
   fclass.s	d,S		F,fp		"11100 00    00000 ..... 001   ..... 10100 11"		l[11:7],f[19:15],-,-			"     wrd(f32_classify(f32(f1)))"

   fcvt.s.w	D,s,m		F,fp		"11010 00    00000 ..... {2:0} ..... 10100 11"		f[11:7],l[19:15],-,-			"srm; wfd(i32_to_f32( ( int32_t)r1));              sfx"
   fcvt.s.wu	D,s,m		F,fp		"11010 00    00001 ..... {2:0} ..... 10100 11"		f[11:7],l[19:15],-,-			"srm; wfd(ui32_to_f32((uint32_t)r1));              sfx"
#  fmv.w.x	D,s		F,fp		"11110 00    00000 ..... 000   ..... 10100 11"		f[11:7],l[19:15],-,-			"     wfd(f32(r1))"
   fmv.w.x	D,s		F		"11110 00    00000 ..... 000   ..... 10100 11"		f[11:7],l[19:15],-,-			"     wfd(f32(r1))"

# RV64F Standard Extension (in addition to RV32F)

   fcvt.l.s	d,S,m		F,fp		"11000 00    00010 ..... {2:0} ..... 10100 11"		l[11:7],f[19:15],-,-			"srm; wrd(f32_to_i64( f32(f1), RM, true)); sfx"
   fcvt.lu.s	d,S,m		F,fp		"11000 00    00011 ..... {2:0} ..... 10100 11"		l[11:7],f[19:15],-,-			"srm; wrd(f32_to_ui64(f32(f1), RM, true)); sfx"
   fcvt.s.l	D,s,m		F,fp		"11010 00    00010 ..... {2:0} ..... 10100 11"		f[11:7],l[19:15],-,-			"srm; wfd(i64_to_f32( ( int32_t)r1));      sfx"
   fcvt.s.lu	D,s,m		F,fp		"11010 00    00011 ..... {2:0} ..... 10100 11"		f[11:7],l[19:15],-,-			"srm; wfd(ui64_to_f32((uint32_t)r1));      sfx"

# RV32D Standard Extension

   fld		D,o(s)		D,ld		"{-11:0}           ..... 011   ..... 00001 11"		d[11:7],l[19:15],-,-			"wfd(f64(LOAD(uint64_t, r1+imm)))"
   fsd		T,q(s)		D,st		"{-11:5}     ..... ..... 011   {4:0} 01001 11"		-,l[19:15],d[24:20],-			"STORE(uint64_t, r1+imm, f2.v[0])"

   fmadd.d	D,S,T,R,m	D,fp		"..... 01    ..... ..... 111   ..... 10000 11"		d[11:7],d[19:15],d[24:20],d[31:27]	"w64( m64(f1) * m64(f2) + m64(f3) )"
   fmsub.d	D,S,T,R,m	D,fp		"..... 01    ..... ..... 111   ..... 10001 11"		d[11:7],d[19:15],d[24:20],d[31:27]	"w64( m64(f1) * m64(f2) - m64(f3) )"
   fnmsub.d	D,S,T,R,m	D,fp		"..... 01    ..... ..... 111   ..... 10010 11"		d[11:7],d[19:15],d[24:20],d[31:27]	"w64(-m64(f1) * m64(f2) + m64(f3) )"
   fnmadd.d	D,S,T,R,m	D,fp		"..... 01    ..... ..... 111   ..... 10011 11"		d[11:7],d[19:15],d[24:20],d[31:27]	"w64(-m64(f1) * m64(f2) - m64(f3) )"

   fmadd.d.rm	D,S,T,R,m	D,fp		"..... 01    ..... ..... {2:0} ..... 10000 11"		d[11:7],d[19:15],d[24:20],d[31:27]	"srm; wfd(f64_mulAdd(f64(f1),                 f64(f2),     f64(f3)            )); sfx"
   fmsub.d.rm	D,S,T,R,m	D,fp		"..... 01    ..... ..... {2:0} ..... 10001 11"		d[11:7],d[19:15],d[24:20],d[31:27]	"srm; wfd(f64_mulAdd(f64(f1),                 f64(f2), f64(f64(f3).v^F64_SIGN))); sfx"
   fnmsub.d.rm	D,S,T,R,m	D,fp		"..... 01    ..... ..... {2:0} ..... 10010 11"		d[11:7],d[19:15],d[24:20],d[31:27]	"srm; wfd(f64_mulAdd(f64(f64(f1).v^F64_SIGN), f64(f2),     f64(f3)            )); sfx"
   fnmadd.d.rm	D,S,T,R,m	D,fp		"..... 01    ..... ..... {2:0} ..... 10011 11"		d[11:7],d[19:15],d[24:20],d[31:27]	"srm; wfd(f64_mulAdd(f64(f64(f1).v^F64_SIGN), f64(f2), f64(f64(f3).v^F64_SIGN))); sfx"

   fadd.d.rm	D,S,T,m		D,fp		"00000 01    ..... ..... {2:0} ..... 10100 11"		d[11:7],d[19:15],d[24:20],-		"srm; wfd(f64_add(f64(f1), f64(f2))); sfx"
   fsub.d.rm	D,S,T,m		D,fp		"00001 01    ..... ..... {2:0} ..... 10100 11"		d[11:7],d[19:15],d[24:20],-		"srm; wfd(f64_sub(f64(f1), f64(f2))); sfx"
   fmul.d.rm	D,S,T,m		D,fp		"00010 01    ..... ..... {2:0} ..... 10100 11"		d[11:7],d[19:15],d[24:20],-		"srm; wfd(f64_mul(f64(f1), f64(f2))); sfx"
   fdiv.d.rm	D,S,T,m		D,fp		"00011 01    ..... ..... {2:0} ..... 10100 11"		d[11:7],d[19:15],d[24:20],-		"srm; wfd(f64_div(f64(f1), f64(f2))); sfx"
   fsqrt.d.rm	D,S,m		D,fp		"01011 01    00000 ..... {2:0} ..... 10100 11"		d[11:7],d[19:15],-,-			"srm; wfd(f64_sqrt(f64(f1)));         sfx"
																		                                     
   fadd.d	D,S,T,m		D,fp		"00000 01    ..... ..... 111   ..... 10100 11"		d[11:7],d[19:15],d[24:20],-		"w64( m64(f1) + m64(f2) )"	     
   fsub.d	D,S,T,m		D,fp		"00001 01    ..... ..... 111   ..... 10100 11"		d[11:7],d[19:15],d[24:20],-		"w64( m64(f1) - m64(f2) )"	     
   fmul.d	D,S,T,m		D,fp		"00010 01    ..... ..... 111   ..... 10100 11"		d[11:7],d[19:15],d[24:20],-		"w64( m64(f1) * m64(f2) )"	     
   fdiv.d	D,S,T,m		D,fp		"00011 01    ..... ..... 111   ..... 10100 11"		d[11:7],d[19:15],d[24:20],-		"w64( m64(f1) / m64(f2) )"	     
   fsqrt.d	D,S,m		D,fp		"01011 01    00000 ..... 111   ..... 10100 11"		d[11:7],d[19:15],-,-			"w64( std::sqrt( m64(f1) ) )"        

   fsgnj.d	D,S,T		D,fp		"00100 01    ..... ..... 000   ..... 10100 11"		d[11:7],d[19:15],d[24:20],-		"     wfd(fsgnj64(f1, f2, false, false))"
   fsgnjn.d	D,S,T		D,fp		"00100 01    ..... ..... 001   ..... 10100 11"		d[11:7],d[19:15],d[24:20],-		"     wfd(fsgnj64(f1, f2, true,  false))"
   fsgnjx.d	D,S,T		D,fp		"00100 01    ..... ..... 010   ..... 10100 11"		d[11:7],d[19:15],d[24:20],-		"     wfd(fsgnj64(f1, f2, false,  true))"
   fmin.d	D,S,T		D,fp		"00101 01    ..... ..... 000   ..... 10100 11"		d[11:7],d[19:15],d[24:20],-		"     wfd(fmin_d(f64(f1), f64(f2)))"
   fmax.d	D,S,T		D,fp		"00101 01    ..... ..... 001   ..... 10100 11"		d[11:7],d[19:15],d[24:20],-		"     wfd(fmax_d(f64(f1), f64(f2)))"

   fcvt.s.d	D,S,m		D,fp		"01000 00    00001 ..... {2:0} ..... 10100 11"		d[11:7],d[19:15],-,-			"srm; wfd(f64_to_f32(f64(f1)));                   sfx"
   fcvt.d.s	D,S,m		D,fp		"01000 01    00000 ..... {2:0} ..... 10100 11"		d[11:7],d[19:15],-,-			"srm; wfd(f32_to_f64(f32(f1)));                   sfx"

   feq.d	d,S,T		D,fp		"10100 01    ..... ..... 010   ..... 10100 11"		l[11:7],d[19:15],d[24:20],-		"     wrd(f64_eq(f64(f1), f64(f2)))"
   flt.d	d,S,T		D,fp		"10100 01    ..... ..... 001   ..... 10100 11"		l[11:7],d[19:15],d[24:20],-		"     wrd(f64_lt(f64(f1), f64(f2)))"
   fle.d	d,S,T		D,fp		"10100 01    ..... ..... 000   ..... 10100 11"		l[11:7],d[19:15],d[24:20],-		"     wrd(f64_lt(f64(f1), f64(f2)))"
   fclass.d	d,S		D,fp		"11100 01    00000 ..... 001   ..... 10100 11"		l[11:7],d[19:15],-,-			"     wrd(f64_classify(f64(f1)))"

   fcvt.w.d	d,S,m		D,fp		"11000 01    00000 ..... {2:0} ..... 10100 11"		l[11:7],d[19:15],-,-			"srm; wrd(f64_to_i32( f64(f1), RM, true)); sfx"
   fcvt.wu.d	d,S,m		D,fp		"11000 01    00001 ..... {2:0} ..... 10100 11"		l[11:7],d[19:15],-,-			"srm; wrd(f64_to_ui32(f64(f1), RM, true)); sfx"
   fcvt.d.w	D,s,m		D,fp		"11010 01    00000 ..... {2:0} ..... 10100 11"		d[11:7],l[19:15],-,-			"srm; wfd(i32_to_f64( ( int32_t)r1));      sfx"
   fcvt.d.wu	D,s,m		D,fp		"11010 01    00001 ..... {2:0} ..... 10100 11"		d[11:7],l[19:15],-,-			"srm; wfd(ui32_to_f64((uint32_t)r1));      sfx"

# RV64D Standard Extension (in addition to RV32D)

   fcvt.l.d	d,S,m		D,fp		"11000 01    00010 ..... {2:0} ..... 10100 11"		l[11:7],d[19:15],-,-			"wrd(f64_to_i64( f64(f1), RM, true)); sfx"
   fcvt.lu.d	d,S,m		D,fp		"11000 01    00011 ..... {2:0} ..... 10100 11"		l[11:7],d[19:15],-,-			"wrd(f64_to_ui64(f64(f1), RM, true)); sfx"
#  fmv.x.d	d,S		D,fp		"11100 01    00000 ..... 000   ..... 10100 11"		l[11:7],d[19:15],-,-			"wrd(f1.v[0])"
   fmv.x.d	d,S		D		"11100 01    00000 ..... 000   ..... 10100 11"		l[11:7],d[19:15],-,-			"wrd(f1.v[0])"
   fcvt.d.l	D,s,m		D,fp		"11010 01    00010 ..... {2:0} ..... 10100 11"		d[11:7],l[19:15],-,-			"wfd(i64_to_f64( ( int64_t)r1));      sfx"
   fcvt.d.lu	D,s,m		D,fp		"11010 01    00011 ..... {2:0} ..... 10100 11"		d[11:7],l[19:15],-,-			"wfd(ui64_to_f64((uint64_t)r1));      sfx"
#  fmv.d.x	D,s		D,fp		"11110 01    00000 ..... 000   ..... 10100 11"		d[11:7],l[19:15],-,-			"wfd(f64(r1))"
   fmv.d.x	D,s		D		"11110 01    00000 ..... 000   ..... 10100 11"		d[11:7],l[19:15],-,-			"wfd(f64(r1))"

